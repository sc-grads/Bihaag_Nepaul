expression 'Transform Sample File' =
		let
		    Source = Csv.Document(Parameter1,[Delimiter=",", Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: cbcadbe8-7ffa-4093-ab47-c9b58634f52d
	queryGroup: 'Transform File from Sales'

	annotation PBI_ResultType = Table

expression Parameter1 = #"Sample File" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: 06c0759d-7904-4498-b1ec-d54bc2e3e6d0
	queryGroup: 'Transform File from Sales\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Sample File' =
		let
		    Source = Folder.Files("C:\Users\Bihaag Nepaul\Downloads\YT-Datasets\Sales"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: 423c4881-a7d9-48e9-bc39-80bc7d44df54
	queryGroup: 'Transform File from Sales\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform File' =
		let
		    Source = (Parameter1) => let
		        Source = Csv.Document(Parameter1,[Delimiter=",", Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		        #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		    in
		        #"Promoted Headers"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File""}" ]
	lineageTag: 19afaeaf-c73d-4adb-9b3c-696f91c4524b
	queryGroup: 'Transform File from Sales\Helper Queries'

	annotation PBI_ResultType = Function

expression 'Errors in Sales' =
		let
		Source = Sales,
		  #"Detected Type Mismatches" = let
		    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
		    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
		    fieldNames = Record.FieldNames(recordTypeFields),
		    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
		    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
		in
		    Table.TransformColumns(Source, pairs),
		  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
		  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"Source.Name", "fSalesPrimaryKey", "ProductID", "SalesRepID", "Location", "Date", "Units", "PercentOfStandardCost", "RevenueDiscount"}),
		  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "Source.Name", "fSalesPrimaryKey", "ProductID", "SalesRepID", "Location", "Date", "Units", "PercentOfStandardCost", "RevenueDiscount"})
		in
		  #"Reordered Columns"
	lineageTag: ff511b31-4e1e-42fd-bd81-37e5e014ed46
	queryGroup: 'Query Errors - 2024/06/24 14:46:16'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

