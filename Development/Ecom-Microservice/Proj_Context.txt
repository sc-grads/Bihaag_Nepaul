the following is the dir structure of my ecommerce microservices project.
All services run in their own
docker containers and communicate via nginx.
Each service is connected to a postgress db which runs as a service in its own container.

ðŸ“¦ecom-microservices
 â”£ ðŸ“‚auth_service 
 â”£ ðŸ“‚nginx
 â”£ ðŸ“‚product_service 
 â”£ ðŸ“‚seller_service 
 â”£ ðŸ“‚templates
 â”£ ðŸ“‚cart_service
 â”— ðŸ“œdocker-compose.yml

Inside the folders are the following:

ðŸ“¦nginx
 â”£ ðŸ“œDockerfile
 â”— ðŸ“œnginx.conf


nginx.conf:
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    gzip on;                      # Enable gzip compression
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        listen 80;

        root /usr/share/nginx/html;
        index home.html;

        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1h;
            add_header Cache-Control "public";

            # Specific rules for video files
            location ~* \.(mp4|webm)$ {
                add_header Content-Disposition "inline";
                add_header Accept-Ranges bytes;
            }
        }

        location /uploaded_images/ {
            proxy_pass http://product_service:8000/uploaded_images/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /auth/ {
            proxy_pass http://auth_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /products/ {
            proxy_pass http://product_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /sellers/ {
            proxy_pass http://seller_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /cart/ {
            proxy_pass http://cart_service:8000;

            # Handle preflight (OPTIONS) requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:8080' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                return 204;  # No content for preflight response
            }

            # Add CORS headers for actual requests
            add_header 'Access-Control-Allow-Origin' 'http://localhost:8080' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }

        location = /product_edit.html {
            root /usr/share/nginx/html;
        }

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
    }
}


docker-compose.yml:

version: '3.8'

services:
  db:
      image: postgres:13
      environment:
        POSTGRES_USER: fastapi
        POSTGRES_PASSWORD: fastapipassword
        POSTGRES_DB: ecommerce_db
      ports:
        - "5432:5432"
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks:
        - ecommerce-network
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U fastapi -d ecommerce_db"]
        interval: 5s
        timeout: 5s
        retries: 5

  auth_service:
    build:
      context: ./auth_service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://fastapi:fastapipassword@db:5432/ecommerce_db
      - GOOGLE_CLIENT_ID=422582982715-i1nckd6lehufls1vihouaag0uflvni95.apps.googleusercontent.com
      - GOOGLE_CLIENT_SECRET=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
      - SECRET_KEY=e3aac17d09746a3effe0dd1b414b9e3e8d64b30a53d2e27b1b5f69e4ed35d2e0
    volumes:
      - ./auth_service:/usr/src/app
      - ./auth_service/app/templates:/app/templates
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce-network

  product_service:
    build:
      context: ./product_service
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://fastapi:fastapipassword@db:5432/ecommerce_db
      - SECRET_KEY=e3aac17d09746a3effe0dd1b414b9e3e8d64b30a53d2e27b1b5f69e4ed35d2e0
    volumes:
      - ./product_service:/app
      - ./product_service/uploaded_images:/app/uploaded_images
      - ./templates:/app/templates
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce-network

  seller_service:
    build:
      context: ./seller_service
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://fastapi:fastapipassword@db:5432/ecommerce_db
    volumes:
      - ./seller_service:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce-network

  cart_service:
    build:
      context: ./cart_service
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://fastapi:fastapipassword@db:5432/ecommerce_db
    volumes:
      - ./cart_service:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce-network

  nginx:
    build:
      context: ./nginx
    ports:
      - "8080:80"
    volumes:
      - ./templates:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth_service
      - product_service
      - seller_service
      - cart_service
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:

I implemented the auth_service and the contents are as follows:

ðŸ“¦auth_service
 â”£ ðŸ“‚app
 â”£ â”£ ðŸ“œ __init__.py
 â”ƒ â”£ ðŸ“œdatabase.py
 â”ƒ â”£ ðŸ“œmain.py
 â”ƒ â”£ ðŸ“œmodels.py
 â”ƒ â”£ ðŸ“œschemas.py
 â”ƒ â”— ðŸ“œauth.py
 â”£ ðŸ“œrequirements.txt
 â”£ ðŸ“œauth.db
 â”— ðŸ“œDockerfile

Templates contains the following:
ðŸ“¦templates
 â”£ ðŸ“‚static
 â”ƒ â”£ ðŸ“‚css
 â”ƒ â”ƒ â”— ðŸ“œstyle.css
 â”ƒ â”£ ðŸ“‚images
 â”ƒ â”ƒ â”— ðŸ“œabstract-timekeeper.svg
 â”ƒ â”— ðŸ“‚js
 â”ƒ â”ƒ â”— ðŸ“œscript.js
 â”£ ðŸ“‚videos
 â”ƒ â”— ðŸ“œvinyl.mp4
 â”£ ðŸ“œbase.html
 â”£ ðŸ“œdummi.html
 â”£ ðŸ“œhome.html
 â”£ ðŸ“œindex.html
 â”£ ðŸ“œlogin.html
 â”£ ðŸ“œproduct_edit.html
 â”£ ðŸ“œproduct_form.html
 â”£ ðŸ“œproduct_list.html
 â”£ ðŸ“œprofile.html
 â”— ðŸ“œregister.html

ðŸ“¦product_service
 â”£ ðŸ“‚app
 â”ƒ â”£ ðŸ“‚uploaded_images
 â”ƒ â”£ ðŸ“œdatabase.py
 â”ƒ â”£ ðŸ“œmain.py
 â”ƒ â”£ ðŸ“œmodels.py
 â”ƒ â”— ðŸ“œschemas.py
 â”£ ðŸ“‚templates
 â”£ ðŸ“‚uploaded_images
 â”ƒ â”£ ðŸ“œAudio Technica Headphonee_headphone.png
 â”ƒ â”— ðŸ“œYoh_Screenshot_2024-09-17_12-14-45.png
 â”£ ðŸ“œDockerfile
 â”£ ðŸ“œproduct.db
 â”— ðŸ“œrequirements.txt

ðŸ“¦cart_service
 â”£ ðŸ“‚app
 â”ƒ â”£ ðŸ“œ__init__.py
 â”ƒ â”£ ðŸ“œdatabase.py
 â”ƒ â”£ ðŸ“œmain.py
 â”ƒ â”£ ðŸ“œmodels.py
 â”ƒ â”— ðŸ“œschemas.py
 â”£ ðŸ“œDockerfile
 â”£ ðŸ“œrequirements.txt
 â”— ðŸ“œcart.db

