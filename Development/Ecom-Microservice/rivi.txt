ðŸ“¦auth_service
 â”£ ðŸ“‚app
 â”ƒ â”£ ðŸ“‚templates
 â”ƒ â”£ ðŸ“œauth.py
 â”ƒ â”£ ðŸ“œdatabase.py
 â”ƒ â”£ ðŸ“œgoogle_auth.py
 â”ƒ â”£ ðŸ“œmain.py
 â”ƒ â”£ ðŸ“œmodels.py
 â”ƒ â”£ ðŸ“œschemas.py
 â”ƒ â”— ðŸ“œ__init__.py
 â”£ ðŸ“œ.env
 â”£ ðŸ“œauth.db
 â”£ ðŸ“œDockerfile
 â”— ðŸ“œrequirements.txt

=========================================================

 auth.py:
 from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta
from . import schemas
from fastapi.security import OAuth2PasswordBearer
from fastapi import Depends, HTTPException, status
from sqlalchemy.orm import Session
from . import models, database
from fastapi import APIRouter, Depends, Request
from authlib.integrations.starlette_client import OAuth
from fastapi.responses import JSONResponse, RedirectResponse
import os

SECRET_KEY = "e3aac17d09746a3effe0dd1b414b9e3e8d64b30a53d2e27b1b5f69e4ed35d2e0"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(db: Session, email: str, password: str):
    user = db.query(models.User).filter(models.User.email == email).first()
    if not user or not verify_password(password, user.hashed_password):
        return False
    return user

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
        token_data = schemas.TokenData(email=email)
    except JWTError:
        raise credentials_exception
    user = db.query(models.User).filter(models.User.email == token_data.email).first()
    if user is None:
        raise credentials_exception
    return user

===============================================================================================

main.py:
from fastapi import FastAPI, Depends, HTTPException, Request, status, Form
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from app import models, schemas, database, auth
from datetime import timedelta
from fastapi.middleware.cors import CORSMiddleware
from fastapi.templating import Jinja2Templates

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Adjust this to restrict origins as needed
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

templates = Jinja2Templates(directory="templates")

# Ensure the database tables are created
models.Base.metadata.create_all(bind=database.engine)

@app.get("/auth/register")
async def get_register_page(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

@app.post("/auth/register", response_model=schemas.UserOut)
def register_user(
    username: str = Form(...),
    email: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(database.get_db)
):
    db_user = db.query(models.User).filter(models.User.email == email).first()
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    hashed_password = auth.get_password_hash(password)
    new_user = models.User(username=username, email=email, hashed_password=hashed_password)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user

@app.post("/auth/login", response_model=schemas.Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):
    user = auth.authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=auth.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = auth.create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/me", response_model=schemas.UserOut)
async def read_users_me(current_user: models.User = Depends(auth.get_current_user)):
    return current_user


=============================================================
models.py:
from sqlalchemy import Column, Integer, String
from .database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)

=====================================================================
schemas.py:
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str

class UserOut(BaseModel):
    id: int
    username: str
    email: EmailStr

    class Config:
        orm_mode = True

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    email: str | None = None

===========================================================
register.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <!-- Bootstrap CSS CDN -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            background-color: #f8f9fa;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .register-container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }
        .register-container h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        .google-login img {
            width: 100%;
        }
    </style>
</head>
<body>

<div class="register-container">
    <h2>Register</h2>

    <!-- Registration Form -->
    <form id="registerForm">
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary btn-block">Register</button>
        <a href="javascript:history.back()" class="btn btn-secondary btn-block">Go Back</a>
    </form>

    <!-- Google Login Button -->
    <div class="google-login" style="margin-top: 20px;">
        <a href="/login">
            <img src="https://developers.google.com/identity/images/btn_google_signin_dark_normal_web.png" alt="Login with Google">
        </a>
    </div>
</div>

<!-- Bootstrap JS and Popper.js -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<!-- Registration Script -->
<script>
document.getElementById("registerForm").onsubmit = function(event) {
    event.preventDefault(); // Prevent the default form submission
    const username = document.getElementById("username").value;
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;

    fetch("/auth/register", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
        },
        body: `username=${encodeURIComponent(username)}&email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`,
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.detail || 'Registration failed');
            });
        }
        return response.json();
    })
    .then(data => {
        alert("Registration successful! Redirecting to login...");
        window.location.href = "/login.html"; // Adjust to the correct login page URL
    })
    .catch(error => {
        console.error("Error:", error);
        alert("An error occurred: " + error.message);
    });
};
</script>

</body>
</html>


============================================================================

login.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <!-- Bootstrap CSS CDN -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    
    <style>
        body {
            background-color: #f8f9fa;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
            position: relative;
        }
        .background-svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }
        svg {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .login-container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 400px;
            z-index: 1;
            transition: border 0.3s ease;
        }
        .login-container:hover {
            border: 2px solid #3f7fc2;
        }
        .login-container h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        .google-login {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .register-link {
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>

    <div class="background-svg">
        <!-- SVG Background -->
        <svg id="visual" viewBox="0 0 1000 480" width="1000" height="480" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
            <rect x="0" y="0" width="1000" height="480" fill="#ffffff"></rect>
            <defs>
                <linearGradient id="grad1_0" x1="55%" y1="0%" x2="100%" y2="100%">
                    <stop offset="5.555555555555554%" stop-color="#3f7fc2" stop-opacity="1"></stop>
                    <stop offset="94.44444444444446%" stop-color="#3f7fc2" stop-opacity="1"></stop>
                </linearGradient>
            </defs>
            <g transform="translate(1020, -100)">
                <path d="M0 405C-47 385.3 -94.1 365.7 -144.7 349.2C-195.2 332.8 -249.3 319.5 -286.4 286.4C-323.4 253.3 -343.4 200.3 -360.3 149.2C-377.2 98.2 -391.1 49.1 -405 0L0 0Z" fill="#d3ddf0"></path>
                <path d="M0 270C-31.4 256.9 -62.7 243.8 -96.4 232.8C-130.2 221.8 -166.2 213 -190.9 190.9C-215.6 168.8 -228.9 133.5 -240.2 99.5C-251.5 65.5 -260.7 32.7 -270 0L0 0Z" fill="#789dd1"></path>
                <path d="M0 135C-15.7 128.4 -31.4 121.9 -48.2 116.4C-65.1 110.9 -83.1 106.5 -95.5 95.5C-107.8 84.4 -114.5 66.8 -120.1 49.7C-125.7 32.7 -130.4 16.4 -135 0L0 0Z" fill="#3f7fc2"></path>
            </g>
            <g transform="translate(-20, 550)">
                <path d="M0 -405C51.9 -398.5 103.8 -392 155 -374.2C206.1 -356.4 256.5 -327.2 285.7 -285.7C314.8 -244.1 322.7 -190.1 339.1 -140.4C355.4 -90.8 380.2 -45.4 405 0L0 0Z" fill="#d3ddf0"></path>
                <path d="M0 -270C34.6 -265.7 69.2 -261.3 103.3 -249.4C137.4 -237.6 171 -218.2 190.4 -190.4C209.9 -162.7 215.1 -126.8 226 -93.6C236.9 -60.5 253.5 -30.3 270 0L0 0Z" fill="#789dd1"></path>
                <path d="M0 -135C17.3 -132.8 34.6 -130.7 51.7 -124.7C68.7 -118.8 85.5 -109.1 95.2 -95.2C104.9 -81.4 107.6 -63.4 113 -46.8C118.5 -30.3 126.7 -15.1 135 0L0 0Z" fill="#3f7fc2"></path>
            </g>
        </svg>
    </div>

    <div class="login-container">
        <h2>Login</h2>
        
        <!-- Login Form -->
        <form action="/auth/login" method="post" id="loginForm">
            <div class="form-group">
                <label for="username">Email:</label>
                <input type="email" id="username" name="username" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>

        <!-- Google Login Button -->
        <div class="google-login">
            <div id="g_id_onload"
                 data-client_id="422582982715-i1nckd6lehufls1vihouaag0uflvni95.apps.googleusercontent.com"
                 data-callback="handleCredentialResponse">
            </div>
            <div class="g_id_signin" data-type="standard"></div>
        </div>

        <!-- Registration Link -->
        <div class="register-link">
            <p>Don't have an account? <a href="register.html">Click here to register</a></p>
        </div>
    </div>

    <!-- Google Sign-In API Script -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>

    <script>
        // Regular login form submission
        document.getElementById('loginForm').onsubmit = function(e) {
            e.preventDefault();
            var username = document.getElementById('username').value;
            var password = document.getElementById('password').value;

            fetch("/auth/login", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                body: `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`,
            })
            .then(response => response.json())
            .then(data => {
                if (data.access_token) {
                    localStorage.setItem('token', data.access_token);
                    alert("Login successful!");
                    window.location.href = "/product_list.html";
                } else {
                    alert("Login failed: " + data.detail);
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("An error occurred. Please try again.");
            });
        };

        // Google Sign-In handling
        function handleCredentialResponse(response) {
            fetch('/auth/google-login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `token=${response.credential}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.access_token) {
                    localStorage.setItem('token', data.access_token);
                    alert("Google login successful!");
                    window.location.href = "/product_list.html";
                } else {
                    alert("Google login failed: " + (data.detail || "Unknown error"));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert("An error occurred during Google login. Please try again.");
            });
        }
    </script>

    <!-- Bootstrap JS and Popper.js -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

</body>
</html>


============================================================================
docker-compose.yml:
version: '3.8'

services:
  auth_service:
    build:
      context: ./auth_service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./auth.db
      - GOOGLE_CLIENT_ID=422582982715-i1nckd6lehufls1vihouaag0uflvni95.apps.googleusercontent.com
      - GOOGLE_CLIENT_SECRET=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
    volumes:
      - ./auth_service:/usr/src/app
      - ./auth_service/app/templates:/app/templates
    networks:
      - ecommerce-network

  product_service:
    build:
      context: ./product_service
    ports:
      - "8001:8000"  # Product service is exposed on port 8001
    environment:
      - DATABASE_URL=sqlite:///./product.db
    volumes:
      - ./product_service:/app
      - ./product_service/uploaded_images:/app/uploaded_images
      - ./templates:/app/templates
    networks:
      - ecommerce-network

  seller_service:
    build:
      context: ./seller_service
    ports:
      - "8002:8000"  # Seller service will be exposed on port 8002
    environment:
      - DATABASE_URL=sqlite:///./seller.db
    volumes:
      - ./seller_service:/app
    networks:
      - ecommerce-network

  cart_service:
    build:
      context: ./cart_service
    ports:
      - "8003:8000"  # Cart service will be exposed on port 8003
    environment:
      - DATABASE_URL=sqlite:///./cart.db
    volumes:
      - ./cart_service:/app
    networks:
      - ecommerce-network

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: fastapi
      POSTGRES_PASSWORD: fastapipassword
      POSTGRES_DB: ecommerce_db
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network

  nginx:
    build:
      context: ./nginx
    ports:
      - "8080:80"
    volumes:
      - ./templates:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth_service
      - product_service
      - seller_service
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge
=====================================================
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    server {
        listen 80;

        location /static/ {
            alias /usr/share/nginx/html/static/;
        }

        location /uploaded_images/ {
            proxy_pass http://product_service:8000/uploaded_images/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        # These are different location blocks for routing based on the URL path of the incoming request.
        # eg /auth/register â†’ It matches the /auth/ location block.
        location /auth/ {
            proxy_pass http://auth_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /products/ {
            proxy_pass http://product_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Allow all methods for /products/ endpoints
            proxy_method $request_method;
            proxy_pass_request_headers on;
            proxy_pass_request_body on;
        }

        location /sellers/ {
            proxy_pass http://seller_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        location /cart/ {
            proxy_pass http://cart_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            # mounted static template files in the container, established in the docker-compose.yml 
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        location = /product_edit.html {
            root /usr/share/nginx/html;
        }
    }
}



===========================================

Overall Proj Structure:
ðŸ“¦ecom-microservices
 â”£ ðŸ“‚auth_service 
 â”£ ðŸ“‚nginx
 â”£ ðŸ“‚product_service 
 â”£ ðŸ“‚seller_service 
 â”£ ðŸ“‚templates
 â”£ ðŸ“‚cart_service
 â”— ðŸ“œdocker-compose.yml